(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{692:function(_,v,t){"use strict";t.r(v);var r=t(17),s=Object(r.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[v("strong",[_._v("问题背景")]),_._v(" ：")]),_._v(" "),v("p",[_._v("某电商Saas平台的订单表 "),v("code",[_._v("orders")]),_._v(" 数据量达到500万条，用户反馈分页查询订单时，翻页到第100页后响应时间超过5秒，严重影响用户体验。数据库版本为MySQL 8.0，表引擎为InnoDB。这里大致给大家演示，大家心里有就好")]),_._v(" "),v("p",[v("strong",[_._v("检查步骤")])]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("表结构与索引检查")]),_._v(" ：")])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 表结构\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  order_time DATETIME,\n  amount DECIMAL(10,2),\n  status TINYINT,\n  product_id INT,\n  INDEX idx_user_id (user_id)\n);\n")])])]),v("ul",[v("li",[_._v("问题：分页查询基于 "),v("code",[_._v("order_time")]),_._v(" 排序，但缺少 "),v("code",[_._v("(order_time, user_id)")]),_._v(" 的联合索引。")]),_._v(" "),v("li",[_._v("现有索引仅覆盖 "),v("code",[_._v("user_id")]),_._v("，无法高效支持排序和分页。")])]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("strong",[_._v("慢查询日志分析：")])])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- SQL\nSELECT * FROM orders\nWHERE user_id = 1001\nORDER BY order_time DESC\nLIMIT 100000, 20; -- 翻页到第5000页时需跳过10万条记录\n")])])]),v("p",[_._v("EXPLAIN 结果显示：type=ALL（全表扫描），Extra=Using filesort（文件排序）。")]),_._v(" "),v("p",[_._v("性能瓶颈定位：")]),_._v(" "),v("p",[_._v("全表扫描：由于未命中覆盖索引，需要回表查询所有字段。")]),_._v(" "),v("p",[_._v("文件排序：ORDER BY 未利用索引排序。")]),_._v(" "),v("p",[_._v("高Offset分页：LIMIT 100000, 20 需要扫描前100000+20条记录，效率极低。")]),_._v(" "),v("h4",{attrs:{id:"优化方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化方案"}},[_._v("#")]),_._v(" "),v("strong",[_._v("优化方案")]),_._v(" ：")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("添加联合索引")]),_._v(" ：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("ALTER TABLE orders ADD INDEX idx_order_time_user_id (order_time DESC, user_id);\n")])])]),v("ul",[v("li",[_._v("覆盖 "),v("code",[_._v("ORDER BY order_time DESC, user_id")]),_._v(" 的排序需求，避免文件排序。")]),_._v(" "),v("li",[_._v("减少回表次数（若查询字段在索引中）。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("优化SQL写法（延迟关联）")]),_._v(" ：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("SELECT o.* \nFROM orders o\nJOIN (\n  SELECT id \n  FROM orders \n  WHERE user_id = 1001\n  ORDER BY order_time DESC\n  LIMIT 100000, 20\n) AS tmp ON o.id = tmp.id;\n")])])]),v("ul",[v("li",[_._v("子查询先通过覆盖索引快速定位主键，再通过主键关联回表，减少数据扫描量。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("分页优化（游标分页）")]),_._v(" ：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 记录上一页最后一条记录的order_time和id\nSELECT * FROM orders\nWHERE user_id = 1001\n  AND (order_time < '2023-10-01 12:00:00' OR (order_time = '2023-10-01 12:00:00' AND id < 12345))\nORDER BY order_time DESC, id DESC\nLIMIT 20;\n")])])]),v("ul",[v("li",[_._v("避免高Offset，通过游标（上一页的最后一条记录的排序字段值）定位下一页起始位置。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("业务层优化")]),_._v(" ：")]),_._v(" "),v("ul",[v("li",[_._v("限制用户最大翻页深度（如最多100页），引导通过搜索或过滤缩小范围。")]),_._v(" "),v("li",[_._v("异步加载或缓存热门数据。")])])])]),_._v(" "),v("hr"),_._v(" "),v("h4",{attrs:{id:"优化效果"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化效果"}},[_._v("#")]),_._v(" "),v("strong",[_._v("优化效果")]),_._v(" ：")]),_._v(" "),v("ul",[v("li",[_._v("查询时间从5秒降至50毫秒内。")]),_._v(" "),v("li",[v("code",[_._v("EXPLAIN")]),_._v(" 显示："),v("code",[_._v("type=range")]),_._v("（索引范围扫描），"),v("code",[_._v("Extra=Using index")]),_._v("（覆盖索引）。")])]),_._v(" "),v("h4",{attrs:{id:"面试官提问"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试官提问"}},[_._v("#")]),_._v(" "),v("strong",[_._v("面试官提问")]),_._v(" ：")]),_._v(" "),v("blockquote",[v("p",[_._v('"请描述一个你解决的MySQL性能优化案例，并说明你的思路和结果。"')])]),_._v(" "),v("h4",{attrs:{id:"回答模板"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回答模板"}},[_._v("#")]),_._v(" "),v("strong",[_._v("回答模板")]),_._v(" ：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("问题背景")]),_._v(' ：\n"我曾在电商平台优化过一个订单分页查询的性能问题。当数据量达到500万时，翻页到深页码（如第100页）时响应时间超过5秒。"')]),_._v(" "),v("li",[v("strong",[_._v("分析过程")]),_._v(" ：\n"),v("ul",[v("li",[_._v("检查表结构和索引，发现缺少支持排序和分页的联合索引。")]),_._v(" "),v("li",[_._v("通过慢查询日志和 "),v("code",[_._v("EXPLAIN")]),_._v("确认全表扫描和文件排序问题。")]),_._v(" "),v("li",[_._v('定位到高Offset分页导致大量无效数据扫描。"')])])]),_._v(" "),v("li",[v("strong",[_._v("优化方案")]),_._v(" ：\n"),v("ul",[v("li",[_._v("添加 "),v("code",[_._v("(order_time, user_id)")]),_._v("的联合索引，覆盖排序和查询条件。")]),_._v(" "),v("li",[_._v("使用延迟关联技术，通过子查询先定位主键再回表，减少数据扫描量。")]),_._v(" "),v("li",[_._v("引入游标分页替代传统分页，避免高Offset问题。")]),_._v(" "),v("li",[_._v('业务层限制最大翻页深度。"')])])]),_._v(" "),v("li",[v("strong",[_._v("结果与总结")]),_._v(" ：\n"),v("ul",[v("li",[_._v("优化后查询时间从5秒降至50毫秒，用户体验显著提升。")]),_._v(" "),v("li",[_._v('总结：索引设计需贴合查询模式，深分页需避免高Offset，业务逻辑与数据库优化需协同。"')])])])]),_._v(" "),v("h3",{attrs:{id:"mysql索引失效性能优化案例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引失效性能优化案例"}},[_._v("#")]),_._v(" MySQL索引失效性能优化案例")]),_._v(" "),v("h4",{attrs:{id:"案例背景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#案例背景"}},[_._v("#")]),_._v(" "),v("strong",[_._v("案例背景")]),_._v(" ：")]),_._v(" "),v("p",[_._v("某社交平台的用户表 "),v("code",[_._v("users")]),_._v(" 数据量增长至1000万条后，用户反馈根据“昵称”搜索时（如模糊查询 "),v("code",[_._v("LIKE '%小明%'")]),_._v("），查询耗时从毫秒级增至10秒以上。表引擎为InnoDB，已有索引如下：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("CREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  nickname VARCHAR(50),\n  age INT,\n  city VARCHAR(20),\n  created_at DATETIME,\n  INDEX idx_nickname (nickname)\n);\n")])])]),v("hr"),_._v(" "),v("h4",{attrs:{id:"问题分析步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题分析步骤"}},[_._v("#")]),_._v(" "),v("strong",[_._v("问题分析步骤")]),_._v(" ：")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("慢查询定位")]),_._v(" ：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 问题SQL\nSELECT * FROM users \nWHERE nickname LIKE '%小明%' \nORDER BY created_at DESC \nLIMIT 20;\n")])])]),v("ul",[v("li",[_._v("用户频繁使用模糊搜索昵称，响应时间超过10秒。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("执行计划分析")]),_._v(" ：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("EXPLAIN SELECT * FROM users WHERE nickname LIKE '%小明%';\n")])])]),v("ul",[v("li",[_._v("结果："),v("code",[_._v("type=ALL")]),_._v("（全表扫描），"),v("code",[_._v("key=NULL")]),_._v("（未使用索引），"),v("code",[_._v("rows=10,000,000")]),_._v("。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("索引失效原因")]),_._v(" ：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("左模糊匹配")]),_._v(" ："),v("code",[_._v("LIKE '%小明%'")]),_._v(" 导致索引失效（B+树无法利用前缀匹配）。")]),_._v(" "),v("li",[v("strong",[_._v("排序与索引不匹配")]),_._v(" ："),v("code",[_._v("ORDER BY created_at")]),_._v(" 未在索引中，触发文件排序（"),v("code",[_._v("Using filesort")]),_._v("）。")]),_._v(" "),v("li",[v("strong",[_._v("回表开销")]),_._v(" ：即使使用索引，仍需回表查询所有字段。")])])])]),_._v(" "),v("hr"),_._v(" "),v("h4",{attrs:{id:"优化方案-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化方案-2"}},[_._v("#")]),_._v(" "),v("strong",[_._v("优化方案")]),_._v(" ：")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("使用全文索引:")])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 添加全文索引\nALTER TABLE users ADD FULLTEXT INDEX ft_nickname (nickname);\n\n-- 优化后SQL\nSELECT * FROM users \nWHERE MATCH(nickname) AGAINST('+小明' IN BOOLEAN MODE)\nORDER BY created_at DESC \nLIMIT 20;\n")])])]),v("ul",[v("li",[v("strong",[_._v("优势")]),_._v(" ：全文索引支持任意位置的文本匹配，避免左模糊问题。")]),_._v(" "),v("li",[v("strong",[_._v("限制")]),_._v(" ：需处理停用词，且中文需配合分词插件（如ngram）。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("覆盖索引优化（若无法使用全文索引）")]),_._v(" ：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 新增联合索引（覆盖查询和排序字段）\nALTER TABLE users ADD INDEX idx_nickname_created_at (nickname, created_at);\n\n-- 强制右模糊查询\nSELECT * FROM users \nWHERE nickname LIKE '小明%'  -- 仅右模糊可利用B+树索引\nORDER BY created_at DESC \nLIMIT 20;\n")])])]),v("ul",[v("li",[v("strong",[_._v("妥协点")]),_._v(" ：牺牲左模糊能力，仅支持前缀匹配。")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("业务层调整")]),_._v(" ：")]),_._v(" "),v("ul",[v("li",[_._v("限制模糊搜索的最小字符长度（如至少3个字）。")]),_._v(" "),v("li",[_._v("引入Elasticsearch等搜索引擎，实现高效全文检索。")])])])]),_._v(" "),v("hr"),_._v(" "),v("h4",{attrs:{id:"优化效果-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化效果-2"}},[_._v("#")]),_._v(" "),v("strong",[_._v("优化效果")]),_._v(" ：")]),_._v(" "),v("ul",[v("li",[_._v("使用全文索引后，查询时间从10秒降至100毫秒内。")]),_._v(" "),v("li",[v("code",[_._v("EXPLAIN")]),_._v(" 显示："),v("code",[_._v("type=fulltext")]),_._v("（全文索引扫描），"),v("code",[_._v("Extra=Using where; Using filesort")]),_._v("（仍需优化排序）。")]),_._v(" "),v("li",[_._v("若结合覆盖索引和游标分页，可进一步消除文件排序。")])]),_._v(" "),v("p",[_._v("最好是使用搜索引擎，但是这里不使用搜索引擎的原因有两个，第一个是数据量不够，第二个是添加ES要增加额外的架构复杂度，并且这里没有聚合的需求，并且项目")]),_._v(" "),v("h3",{attrs:{id:"面试回答技巧"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试回答技巧"}},[_._v("#")]),_._v(" "),v("strong",[_._v("面试回答技巧")])]),_._v(" "),v("h4",{attrs:{id:"面试官提问-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试官提问-2"}},[_._v("#")]),_._v(" "),v("strong",[_._v("面试官提问")]),_._v(" ：")]),_._v(" "),v("blockquote",[v("p",[_._v('"请举例说明你遇到的MySQL索引失效场景，以及如何解决的。"')])]),_._v(" "),v("h4",{attrs:{id:"回答模板-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回答模板-2"}},[_._v("#")]),_._v(" "),v("strong",[_._v("回答模板")]),_._v(" ：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("问题背景")]),_._v(' ：\n"在社交平台的用户模糊搜索功能中，当用户量达到千万级时，'),v("code",[_._v("LIKE '%xxx%'")]),_._v("查询性能急剧下降。原因为 "),v("code",[_._v("nickname")]),_._v('字段的普通B+树索引因左模糊失效，导致全表扫描。"')]),_._v(" "),v("li",[v("strong",[_._v("分析过程")]),_._v(" ：\n"),v("ul",[v("li",[_._v("通过 "),v("code",[_._v("EXPLAIN")]),_._v("确认索引未命中，发现 "),v("code",[_._v("type=ALL")]),_._v("和 "),v("code",[_._v("Using filesort")]),_._v("。")]),_._v(" "),v("li",[_._v("定位到 "),v("code",[_._v("LIKE")]),_._v("左模糊是核心问题，B+树索引无法支持随机字符串匹配。")]),_._v(" "),v("li",[_._v('评估是否可通过业务调整将左模糊改为右模糊（如搜索日志场景）。"')])])]),_._v(" "),v("li",[v("strong",[_._v("优化方案")]),_._v(" ：\n"),v("ul",[v("li",[v("strong",[_._v("短期方案")]),_._v(" ：添加全文索引（"),v("code",[_._v("FULLTEXT")]),_._v("），利用倒排索引加速任意位置匹配。")]),_._v(" "),v("li",[v("strong",[_._v("长期方案")]),_._v(" ：引入Elasticsearch，专用于复杂搜索场景，并同步数据。")]),_._v(" "),v("li",[v("strong",[_._v("业务妥协")]),_._v(' ：限制模糊搜索的最小输入长度，减少无效请求。"')])])]),_._v(" "),v("li",[v("strong",[_._v("结果与总结")]),_._v(" ：\n"),v("ul",[v("li",[_._v("全文索引使查询耗时从10秒降至100毫秒，但中文分词需配置ngram插件。")]),_._v(" "),v("li",[_._v("核心教训：B+树索引仅适合前缀匹配，复杂文本搜索需结合专用工具。")]),_._v(" "),v("li",[_._v('后续通过ES实现了更灵活的搜索功能（如拼音搜索、同义词）。"')])])])]),_._v(" "),v("hr"),_._v(" "),v("h4",{attrs:{id:"加分点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#加分点"}},[_._v("#")]),_._v(" "),v("strong",[_._v("加分点")]),_._v(" ：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("原理深入")]),_._v(" ：解释B+树索引的层序遍历机制，说明左模糊为何破坏前缀匹配。")]),_._v(" "),v("li",[v("strong",[_._v("扩展方案")]),_._v(" ：\n"),v("ul",[v("li",[_._v("提到 "),v("code",[_._v("INNODB_FT_DEFAULT_STOPWORD")]),_._v("处理停用词。")]),_._v(" "),v("li",[_._v("使用 "),v("code",[_._v("ngram_token_size")]),_._v("调整中文分词粒度。")])])]),_._v(" "),v("li",[v("strong",[_._v("权衡思考")]),_._v(" ：\n"),v("ul",[v("li",[_._v("全文索引的存储开销与写入性能影响。")]),_._v(" "),v("li",[_._v("业务是否接受“右模糊”的体验差异（如仅允许搜索“前缀”）。")])])])]),_._v(" "),v("p",[_._v("话术：")]),_._v(" "),v("p",[_._v("我曾经做过一个电商的Saas平台，需求是我们的平台的订单表 "),v("code",[_._v("orders")]),_._v(" 数据量达到500万条，用户反馈分页查询订单时，翻页到第100页后响应时间超过5秒，严重影响用户体验。")]),_._v(" "),v("p",[v("strong",[_._v("我最开始去排查的时候，检查表结构以及索引，发现缺少支持排序和分页的正常索引，并且由于数据偏移量较大，所以导致我们的项目没有正常使用到user_id的索引，通过由于没有正常的需求把控，导致用户可以随意的操作页数，进而倒置高偏移量查询，导致扫描了大量的无效数据，")])]),_._v(" "),v("p",[v("strong",[_._v("我们经过讨论，确定了优化的方案，添加联合索引，将查询字段以及条件字段做为联合索引覆盖排序以及查询条件，使用了延迟关联的技术，通过子查询先定位主键再进行回表，减少数据扫描量，引入了游标分页的方式替代传统分页的方式，避免了高偏移量，并且辅助业务进行最大翻页深度的限制，")])]),_._v(" "),v("p",[v("strong",[_._v("优化之后，我们的查询时间从5S降低到50ms，4用户反馈体验显著提升")])]),_._v(" "),v("hr"),_._v(" "),v("h4",{attrs:{id:"常见索引失效场景归纳-面试备用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见索引失效场景归纳-面试备用"}},[_._v("#")]),_._v(" "),v("strong",[_._v("常见索引失效场景归纳（面试备用）")]),_._v(" ：")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("strong",[_._v("场景")])]),_._v(" "),v("th",[v("strong",[_._v("示例")])]),_._v(" "),v("th",[v("strong",[_._v("解决方案")])])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("左模糊查询")]),_._v(" "),v("td",[v("code",[_._v("LIKE '%abc'")])]),_._v(" "),v("td",[_._v("全文索引、右模糊、ES")])]),_._v(" "),v("tr",[v("td",[_._v("对索引列使用函数/表达式")]),_._v(" "),v("td",[v("code",[_._v("WHERE YEAR(create_time)=2023")])]),_._v(" "),v("td",[_._v("改用范围查询（"),v("code",[_._v("BETWEEN")]),_._v("）")])]),_._v(" "),v("tr",[v("td",[_._v("隐式类型转换")]),_._v(" "),v("td",[v("code",[_._v("WHERE id = '100'")]),_._v("（id为INT）")]),_._v(" "),v("td",[_._v("确保类型一致")])]),_._v(" "),v("tr",[v("td",[_._v("OR条件部分无索引")]),_._v(" "),v("td",[v("code",[_._v("WHERE a=1 OR b=2")]),_._v("（b无索引）")]),_._v(" "),v("td",[_._v("为b添加索引，或改用UNION")])]),_._v(" "),v("tr",[v("td",[_._v("联合索引跳过最左列")]),_._v(" "),v("td",[_._v("索引 "),v("code",[_._v("(a,b)")]),_._v("，查询 "),v("code",[_._v("WHERE b=2")])]),_._v(" "),v("td",[_._v("调整索引顺序或补充条件（如 "),v("code",[_._v("a IN(...)")]),_._v("）")])])])]),_._v(" "),v("hr"),_._v(" "),v("p",[_._v("通过此案例，不仅能展示对索引机制的深刻理解，还能体现从技术到业务的综合优化能力，这在面试中会极具说服力。")]),_._v(" "),v("h3",{attrs:{id:"实际项目场景-高并发电商订单系统-雪花算法id与mysql结合的业务问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实际项目场景-高并发电商订单系统-雪花算法id与mysql结合的业务问题"}},[_._v("#")]),_._v(" 实际项目场景："),v("strong",[_._v("高并发电商订单系统 （雪花算法id与mysql结合的业务问题 ）")])]),_._v(" "),v("hr"),_._v(" "),v("h4",{attrs:{id:"业务背景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#业务背景"}},[_._v("#")]),_._v(" "),v("strong",[_._v("业务背景")])]),_._v(" "),v("p",[_._v("某电商平台日订单量超过  "),v("strong",[_._v("1000 万")]),_._v(" ，订单数据需分库分表存储（分 16 个库，每个库 64 张表）。系统采用雪花算法生成订单 ID（主键），但在以下环节出现性能问题：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("写入性能下降")]),_._v(" ：高并发下索引页频繁分裂，导致插入延迟。")]),_._v(" "),v("li",[v("strong",[_._v("分页查询卡顿")]),_._v(" ：用户查看历史订单时，"),v("code",[_._v("LIMIT 1000000, 10")]),_._v(" 查询耗时超过 3 秒。")]),_._v(" "),v("li",[v("strong",[_._v("时间范围查询低效")]),_._v(" ：运营需按时间筛选订单，但直接解析雪花 ID 时间戳导致全表扫描。")]),_._v(" "),v("li",[v("strong",[_._v("分库分表后 ID 冲突")]),_._v(" ：某次扩容后，因 "),v("code",[_._v("worker_id")]),_._v(" 分配重复，导致多个分片生成重复 ID。")])]),_._v(" "),v("p",[_._v("优化方案：")]),_._v(" "),v("h5",{attrs:{id:"_1-写入性能优化-索引分裂问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-写入性能优化-索引分裂问题"}},[_._v("#")]),_._v(" "),v("strong",[_._v("1. 写入性能优化（索引分裂问题）")])]),_._v(" "),v("p",[v("strong",[_._v("问题分析")]),_._v("\n雪花 ID 在同一毫秒内局部乱序（如不同节点生成的 ID 交叉插入），导致主键索引页频繁分裂，写入性能下降。")]),_._v(" "),v("p",[v("strong",[_._v("解决方案")])]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("主键改用自增 ID + 冗余雪花 ID")]),_._v("\n保留雪花 ID 作为业务唯一标识（如订单号），但主键改用 MySQL 自增 ID，确保物理写入顺序性。")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("CREATE TABLE orders (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,  -- 自增主键，保证物理有序\n  order_no BIGINT UNSIGNED NOT NULL,    -- 雪花算法生成的业务 ID\n  user_id BIGINT NOT NULL,\n  create_time DATETIME NOT NULL,\n  INDEX idx_order_no (order_no),\n  INDEX idx_create_time (create_time)\n) ENGINE=InnoDB;\n")])])])])]),_._v(" "),v("p",[v("strong",[_._v("效果")])]),_._v(" "),v("ul",[v("li",[_._v("写入吞吐量提升  "),v("strong",[_._v("40%")]),_._v(" （索引分裂减少）。")]),_._v(" "),v("li",[_._v("业务层仍可通过 "),v("code",[_._v("order_no")]),_._v(" 保证分布式唯一性。")])]),_._v(" "),v("hr"),_._v(" "),v("h5",{attrs:{id:"_2-分库分表-id-冲突-worker-id-分配"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-分库分表-id-冲突-worker-id-分配"}},[_._v("#")]),_._v(" "),v("strong",[_._v("2. 分库分表 ID 冲突（Worker ID 分配）")])]),_._v(" "),v("p",[v("strong",[_._v("问题分析")]),_._v("\n手动配置 "),v("code",[_._v("worker_id")]),_._v("，扩容时因运维误操作导致两个分片使用相同的 "),v("code",[_._v("worker_id")]),_._v("，生成重复订单号。")]),_._v(" "),v("p",[v("strong",[_._v("解决方案")])]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("动态 Worker ID 分配")]),_._v("\n服务启动时，通过 ZooKeeper 临时节点申请 "),v("code",[_._v("worker_id")]),_._v("，确保全局唯一：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('// 伪代码：基于 ZooKeeper 的 Worker ID 分配\npublic class SnowflakeWorker {\n    private int workerId;\n\n    public SnowflakeWorker() {\n        String path = "/snowflake/workers";\n        // 在 ZooKeeper 上创建临时顺序节点，返回序号作为 workerId\n        String node = zk.create(path + "/worker-", EPHEMERAL_SEQUENTIAL);\n        this.workerId = extractWorkerIdFromNode(node);  // 如节点名为 worker-0003，则 workerId=3\n    }\n}\n')])])])])]),_._v(" "),v("p",[v("strong",[_._v("效果")])]),_._v(" "),v("ul",[v("li",[_._v("彻底避免 "),v("code",[_._v("worker_id")]),_._v(" 冲突，支持动态扩容缩容。")])]),_._v(" "),v("hr"),_._v(" "),v("h5",{attrs:{id:"_3-时间范围查询优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-时间范围查询优化"}},[_._v("#")]),_._v(" "),v("strong",[_._v("3. 时间范围查询优化")])]),_._v(" "),v("p",[v("strong",[_._v("问题分析")]),_._v("\n运营需查询 "),v("code",[_._v("2023-10-01 至 2023-10-02")]),_._v(" 的订单，但直接通过雪花 ID 解析时间戳需全表扫描：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 低效查询（需解析 ID 的时间戳）\nSELECT * FROM orders \nWHERE (order_no >> 22) BETWEEN start_timestamp AND end_timestamp;\n")])])]),v("p",[v("strong",[_._v("解决方案")])]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("显式存储时间字段 + 复合索引")]),_._v("\n冗余 "),v("code",[_._v("create_time")]),_._v(" 字段，并建立 "),v("code",[_._v("(create_time, order_no)")]),_._v(" 索引：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("ALTER TABLE orders ADD INDEX idx_time_order (create_time, order_no);\n")])])]),v("p",[_._v("查询时直接利用时间字段过滤：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 高效查询（命中索引）\nSELECT * FROM orders \nWHERE create_time BETWEEN '2023-10-01' AND '2023-10-02'\nORDER BY create_time, order_no LIMIT 1000;\n")])])])])]),_._v(" "),v("p",[v("strong",[_._v("效果")])]),_._v(" "),v("ul",[v("li",[_._v("时间范围查询耗时从 "),v("strong",[_._v("2.5 秒")]),_._v(" 降至  "),v("strong",[_._v("50 毫秒")]),_._v(" 。")])]),_._v(" "),v("hr"),_._v(" "),v("h5",{attrs:{id:"_4-分页查询优化-游标分页"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-分页查询优化-游标分页"}},[_._v("#")]),_._v(" "),v("strong",[_._v("4. 分页查询优化（游标分页）")])]),_._v(" "),v("p",[v("strong",[_._v("问题分析")]),_._v("\n用户查看历史订单时，传统分页 "),v("code",[_._v("LIMIT 1000000, 10")]),_._v(" 需遍历大量无效数据。")]),_._v(" "),v("p",[v("strong",[_._v("解决方案")])]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("基于自增主键的游标分页")]),_._v("\n前端传递最后一条记录的 "),v("code",[_._v("id")]),_._v("，后端通过 "),v("code",[_._v("WHERE id > {last_id}")]),_._v(" 实现高效分页：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("-- 第一页\nSELECT * FROM orders \nWHERE user_id = 123 \nORDER BY id ASC \nLIMIT 10;\n\n-- 后续页（前端传递 last_max_id=100）\nSELECT * FROM orders \nWHERE user_id = 123 AND id > 100 \nORDER BY id ASC \nLIMIT 10;\n")])])])])]),_._v(" "),v("p",[v("strong",[_._v("效果")])]),_._v(" "),v("ul",[v("li",[_._v("分页查询耗时从 "),v("strong",[_._v("3 秒")]),_._v(" 降至  "),v("strong",[_._v("10 毫秒")]),_._v(" 。")])]),_._v(" "),v("hr"),_._v(" "),v("h5",{attrs:{id:"_5-时间回拨容错"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-时间回拨容错"}},[_._v("#")]),_._v(" "),v("strong",[_._v("5. 时间回拨容错")])]),_._v(" "),v("p",[v("strong",[_._v("问题分析")]),_._v("\n某次服务器时钟同步异常，导致生成重复订单号，引发数据不一致。")]),_._v(" "),v("p",[v("strong",[_._v("解决方案")])]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("时钟监控 + 异常等待")]),_._v("\n在雪花算法代码中增加时钟回拨检测，若回拨时间小于阈值（如 100ms），则等待时钟追平：")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('public synchronized long nextId() {\n    long currentTimestamp = System.currentTimeMillis();\n    if (currentTimestamp < lastTimestamp) {\n        long offset = lastTimestamp - currentTimestamp;\n        if (offset <= 100) {\n            Thread.sleep(offset);  // 等待时钟追平\n            currentTimestamp = System.currentTimeMillis();\n        } else {\n            throw new RuntimeException("Clock moved backwards!");\n        }\n    }\n    // ...正常生成逻辑\n}\n')])])])])]),_._v(" "),v("p",[v("strong",[_._v("效果")])]),_._v(" "),v("ul",[v("li",[_._v("避免因时钟回拨导致的数据冲突，系统可用性提升。")])]),_._v(" "),v("hr"),_._v(" "),v("h4",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" "),v("strong",[_._v("总结")])]),_._v(" "),v("p",[_._v("通过上述优化，该电商订单系统实现了：")]),_._v(" "),v("ol",[v("li",[_._v("写入性能提升  "),v("strong",[_._v("40%")]),_._v(" ，分页查询耗时降低  "),v("strong",[_._v("99%")]),_._v(" 。")]),_._v(" "),v("li",[_._v("彻底解决分库分表后的 ID 冲突问题。")]),_._v(" "),v("li",[_._v("时间范围查询效率提升  "),v("strong",[_._v("50 倍")]),_._v(" 。")]),_._v(" "),v("li",[_._v("系统具备时钟回拨容错能力，保障数据一致性。")])]),_._v(" "),v("p",[v("strong",[_._v("技术选型对比")])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("组件/策略")]),_._v(" "),v("th",[_._v("优化前")]),_._v(" "),v("th",[_._v("优化后")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("主键设计")]),_._v(" "),v("td",[_._v("雪花 ID 作为主键")]),_._v(" "),v("td",[_._v("自增主键 + 雪花 ID 冗余")])]),_._v(" "),v("tr",[v("td",[_._v("Worker ID 分配")]),_._v(" "),v("td",[_._v("手动配置")]),_._v(" "),v("td",[_._v("ZooKeeper 动态分配")])]),_._v(" "),v("tr",[v("td",[_._v("分页查询")]),_._v(" "),v("td",[_._v("LIMIT OFFSET")]),_._v(" "),v("td",[_._v("游标分页（基于自增 ID）")])]),_._v(" "),v("tr",[v("td",[_._v("时间范围查询")]),_._v(" "),v("td",[_._v("解析雪花 ID 时间戳")]),_._v(" "),v("td",[_._v("显式时间字段 + 复合索引")])])])]),_._v(" "),v("p",[_._v("通过结合业务需求（高并发写入、分布式扩展、高效查询），选择针对性优化策略，实现性能与稳定性的平衡。")]),_._v(" "),v("h2",{attrs:{id:"面试场景题-mysql分库分表性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面试场景题-mysql分库分表性能优化"}},[_._v("#")]),_._v(" "),v("strong",[_._v("面试场景题：MySQL分库分表性能优化")])]),_._v(" "),v("p",[v("strong",[_._v("场景描述：")]),_._v("\n某电商平台的订单表采用分库分表设计，分为16个库，每个库64张表，分片键为用户ID的哈希值。随着业务增长，出现以下问题：")]),_._v(" "),v("ul",[v("li",[_._v("用户查询自己的订单列表时响应时间变长。")]),_._v(" "),v("li",[_._v("运营按时间范围统计订单的查询性能极差。")]),_._v(" "),v("li",[_._v("高峰期部分分库负载过高，导致延迟增加。")])]),_._v(" "),v("p",[v("strong",[_._v("问题分析及优化方案：")])]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("用户订单查询响应时间长")]),_._v(" "),v("strong",[_._v("原因分析：")])])]),_._v(" "),v("ul",[v("li",[_._v("索引缺失：用户查询订单时可能基于用户ID和时间排序，若分片内未建立 (user_id, create_time) 的联合索引，会导致全表扫描。")]),_._v(" "),v("li",[_._v("数据倾斜：某些用户订单量极大，导致其所在分片数据量远超其他分片，查询效率下降。")]),_._v(" "),v("li",[_._v("分片键限制：仅用用户ID哈希分片，未考虑时间维度，可能导致单分片内数据冷热不均。")])]),_._v(" "),v("p",[v("strong",[_._v("优化方案：")])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("联合索引优化：")]),_._v("\n在每个分片表中创建 (user_id, create_time) 的联合索引，加速排序和过滤。")])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("ALTER TABLE orders_${shard} ADD INDEX idx_user_time (user_id, create_time);\n")])])]),v("ul",[v("li",[v("strong",[_._v("冷热数据分离：")]),_._v("\n将历史订单（如6个月前）归档到独立的历史库，减少当前分片的数据量。")]),_._v(" "),v("li",[v("strong",[_._v("动态分片调整：")]),_._v("\n对超高频用户（如大卖家）单独分片或采用用户ID+时间复合分片键，分散压力。")])]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("strong",[_._v("时间范围统计查询性能差")]),_._v(" "),v("strong",[_._v("原因分析：")]),_._v("\n时间范围查询需跨所有分片扫描数据，导致大量IO和网络开销，且无法利用分片键直接定位。")])]),_._v(" "),v("p",[v("strong",[_._v("优化方案：")])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("异步ETL到分析型数据库：")]),_._v("\n将订单数据同步至列式存储数据库（如ClickHouse）或Elasticsearch，专用于复杂查询。")])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("# 使用DataX或Canal同步数据\ncanal.adapter -> ClickHouse\n")])])]),v("ul",[v("li",[v("strong",[_._v("时间分片冗余")]),_._v(" ：")])]),_._v(" "),v("p",[_._v("在分库分表基础上，按月份分片（如 "),v("code",[_._v("order_202310")]),_._v("），结合用户ID哈希，实现双维度分片。")]),_._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[_._v("// 分片策略伪代码：userHash % 16 + 时间戳前缀（如202310）")]),_._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("String")]),_._v(" shardKey "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" userIdHash "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("+")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[_._v('"_"')]),_._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("+")]),_._v(" timestampPrefix"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),v("ul",[v("li",[v("strong",[_._v("并行查询聚合：")]),_._v("\n在应用层并行查询所有分片，合并结果后返回，减少串行延迟。")])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("CompletableFuture<List<Order>> future1 = queryShard(shard1, startTime, endTime);\nCompletableFuture<List<Order>> future2 = queryShard(shard2, startTime, endTime);\n// ...合并所有结果\n")])])]),v("h4",{attrs:{id:"高峰期部分分库负载过高"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高峰期部分分库负载过高"}},[_._v("#")]),_._v(" "),v("strong",[_._v("高峰期部分分库负载过高")])]),_._v(" "),v("p",[v("strong",[_._v("原因分析：")])]),_._v(" "),v("ul",[v("li",[_._v("哈希不均匀：用户ID哈希分布不均，导致某些分片数据量或请求量过高。")]),_._v(" "),v("li",[_._v("热点用户：少数高频用户集中访问同一分片。")])]),_._v(" "),v("p",[_._v("优化方案：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("一致性哈希优化：")]),_._v("\n采用一致性哈希算法替代简单哈希，扩容时仅迁移部分数据，减少负载波动。")]),_._v(" "),v("li",[v("strong",[_._v("动态负载均衡")]),_._v(" ：\n监控分片负载，自动迁移热点数据至空闲分片。")]),_._v(" "),v("li",[v("strong",[_._v("本地缓存+限流")]),_._v(" ：\n对热点用户订单数据缓存到Redis，并设置限流策略（如令牌桶），防止击穿数据库。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);