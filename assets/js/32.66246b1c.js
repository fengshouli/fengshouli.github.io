(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{531:function(t,s,a){t.exports=a.p+"assets/img/image-20240619193746657.606a406a.png"},532:function(t,s,a){t.exports=a.p+"assets/img/image-20240619195020246.f4b21be8.png"},533:function(t,s,a){t.exports=a.p+"assets/img/image-20240619224435225.25764843.png"},534:function(t,s,a){t.exports=a.p+"assets/img/image-20240619235354295.5a0b8fea.png"},535:function(t,s,a){t.exports=a.p+"assets/img/image-20240619235636268.15f18cff.png"},711:function(t,s,a){"use strict";a.r(s);var n=a(17),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"kmp算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kmp算法"}},[t._v("#")]),t._v(" KMP算法")]),t._v(" "),s("h2",{attrs:{id:"每年必考高频题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每年必考高频题"}},[t._v("#")]),t._v(" 每年必考高频题")]),t._v(" "),s("h2",{attrs:{id:"kmp算法的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kmp算法的定义"}},[t._v("#")]),t._v(" KMP算法的定义")]),t._v(" "),s("blockquote",[s("p",[t._v("假设字符串str长度为N，字符串match长度为M，M <= N"),s("br"),t._v("\n想确定str中是否有某个子串是等于match的。"),s("br"),t._v("\n时间复杂度O(N)")]),t._v(" "),s("p",[t._v("java的indexOf.")])]),t._v(" "),s("h2",{attrs:{id:"kmp是三个人名缩写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kmp是三个人名缩写"}},[t._v("#")]),t._v(" KMP是三个人名缩写.")]),t._v(" "),s("h2",{attrs:{id:"kmp算法核心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kmp算法核心"}},[t._v("#")]),t._v(" KMP算法核心")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如何理解next数组")])]),t._v(" "),s("li",[s("p",[t._v("如何利用next数组加速匹配过程，优化时的两个实质！")])])]),t._v(" "),s("h2",{attrs:{id:"暴力方法时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暴力方法时间复杂度"}},[t._v("#")]),t._v(" 暴力方法时间复杂度")]),t._v(" "),s("p",[t._v("每当第一个匹配到的时候,后面挨个遍历匹配,所以是"),s("code",[t._v("M*N")]),t._v("次 复杂度O(N*M),")]),t._v(" "),s("h2",{attrs:{id:"算法核心1-next数组-i位置以前的最大前缀-最大后缀的长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法核心1-next数组-i位置以前的最大前缀-最大后缀的长度"}},[t._v("#")]),t._v(" 算法核心1-next数组-i位置以前的最大前缀=最大后缀的长度")]),t._v(" "),s("p",[t._v("match串,每个字符,都对应一个next数组的值.")]),t._v(" "),s("p",[t._v("首先有2个重要规定")]),t._v(" "),s("ol",[s("li",[t._v("任何字符串,任何,都是next[0]=-1,next[1]=0.")]),t._v(" "),s("li",[t._v("前后缀匹配不到最大长度,")])]),t._v(" "),s("p",[t._v("其次,对于任何"),s("code",[t._v("i")]),t._v("位置来说,他对应的next[i] = "),s("strong",[t._v("最大")]),t._v("前缀串与最大后缀串相等的长度,例子如图")]),t._v(" "),s("p",[t._v("注意啊,i位置的信息,是和他本身没有任何关系的,是求他前面的.")]),t._v(" "),s("p",[t._v("例如:abcabck,假设,求k位置,和k的字符的位置是没有任何关系的,是他之前的字符串的能匹配上的最长前缀和最长后缀.")]),t._v(" "),s("p",[t._v(",next[6] = 3,next[0] = -1, next[1] = 0")]),t._v(" "),s("p",[s("img",{attrs:{src:a(531),alt:"image-20240619193746657"}})]),t._v(" "),s("h2",{attrs:{id:"利用next数组加速过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用next数组加速过程"}},[t._v("#")]),t._v(" 利用next数组加速过程")]),t._v(" "),s("p",[t._v("暴力算法的最吃亏的地方就是,M-2位置的都对上了,只有M-1不对,但是再次匹配到M[0]时候,又得全部再配一遍,对已经配过的,没有提示作用.那么KMP算法是怎么加速的呢.")]),t._v(" "),s("ol",[s("li",[t._v("我们先对s2字符串求了next数组(谁被match,谁求next数组.)")]),t._v(" "),s("li",[t._v("假设在s1[i]== s2[0]了,那我们继续匹配,直到s1某个字符!=s2某个字符了.例如图中,s1[X]!=s2[Y]")]),t._v(" "),s("li",[t._v("此时我们可以知道next[Y]的值是多少,因为next数组的计算规则,Y前面前后缀相等最大的一段,就是"),s("code",[t._v("①==②")]),t._v("的,因为我们是从i一直推到X,才对不上的,所以③一定是== ②的.所以"),s("code",[t._v("①==③")]),t._v(",也就是j~X-1范围,就是②范围")]),t._v(" "),s("li",[t._v("如果我们确定i~j位置,绝对是没有用的区域,绝对配不出来(后面证明),是不是我们也知道"),s("code",[t._v("①==③")]),t._v(",所以我们直接让j位置和0对齐,从X是否"),s("code",[t._v("==")]),t._v("Z开始判断即可,看到了吗,这里加速了,.")]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("s1[X]==s2[Z]")]),t._v(",那么继续都下一个继续比,如果不等,Z也有自己的最大前后缀相等数组,0位置推到j'位置,继续重复上面的步骤.")]),t._v(" "),s("li",[t._v("如果一直推推推,s1[X]连s2[0]位置都没配上,那s1换下一个开头吧,换s1[X+1]匹配s2[0],什么时候匹配到了,继续上面的步骤.")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(532),alt:"image-20240619195020246"}})]),t._v(" "),s("h2",{attrs:{id:"证明i-j之间任何一个k位置出发-都绝对配不出s2来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#证明i-j之间任何一个k位置出发-都绝对配不出s2来"}},[t._v("#")]),t._v(" 证明i~j之间任何一个k位置出发,都绝对配不出s2来.")]),t._v(" "),s("p",[t._v("这是上面步骤4的证明.当X,Y位置不相等时候,i~j位置中任何k位置出发,绝对配不出来.i~j位置是无效区域.不需要验证.")]),t._v(" "),s("p",[t._v("我们反证,假设k位置出发,可以配出来s2.")]),t._v(" "),s("p",[t._v("s1  k k+1 k+2  .. ?")]),t._v(" "),s("p",[t._v("s2  0 1     2,     ...M")]),t._v(" "),s("p",[t._v("就是说上面的都能配出来.")]),t._v(" "),s("p",[t._v("我先画个图")]),t._v(" "),s("p",[s("img",{attrs:{src:a(533),alt:"image-20240619224435225"}})]),t._v(" "),s("p",[t._v("好,你号称k出发到X可能能配出来s2,好那你起码k~X得能配出⑥(等量前缀)这段吧,")]),t._v(" "),s("p",[t._v("继续,别忘了一个结论,那就是,s1[i]对应s2[0],一直到s1[X],s2[Y]才折了,那到Y-1前,你肯定一路都相等吧,也就是说"),s("code",[t._v("④==⑤")]),t._v("吧,如果你"),s("code",[t._v("④==⑤")]),t._v(",可是我"),s("code",[t._v("④==⑥")]),t._v(",")]),t._v(" "),s("p",[t._v("不对劲,k在j左边,④一定比③大,?那就是说Y之前存在一个更长的前缀⑥和后缀⑤能匹配上,那就和next数组求的冲突了,我next数组不可能求错,那只能是假设错了.")]),t._v(" "),s("h2",{attrs:{id:"kmp的code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kmp的code"}},[t._v("#")]),t._v(" KMP的code")]),t._v(" "),s("p",[t._v("x,y指的是画圈的位置,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIndexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" str1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toCharArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toCharArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(M) m <= n")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNextArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// O(N)")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从头开始,如果匹配上了,那就两个串下一个字符接着比.")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\ty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//否则到某个断了,如果跟我第二串第1个字符都比不上,那换个直接串1下一个重新试试吧")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// y == 0")]),t._v("\n\t\t\t\tx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//否则不一定一个都对不上呢,那就是跳到next数组值上,相当于整个串2往后推.")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\ty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//只有x或者y越界了,才会跳出,如果是y越界,只可能是s2全部匹配到了,那就是从x位置-y位置,就是字符串出现位置,否则x越界,没找到.")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"估算复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#估算复杂度"}},[t._v("#")]),t._v(" 估算复杂度")]),t._v(" "),s("p",[t._v("三个分支分别估算.")]),t._v(" "),s("p",[t._v("X最大是N,Y最大是M(到不了N)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("X(max:N)")]),t._v(" "),s("th",[t._v("X-Y(max:M)")]),t._v(" "),s("th",[t._v("结果")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("分支1")]),t._v(" "),s("td",[t._v("↑")]),t._v(" "),s("td",[t._v("↑")]),t._v(" "),s("td",[t._v("不变")])]),t._v(" "),s("tr",[s("td",[t._v("分支2")]),t._v(" "),s("td",[t._v("↑")]),t._v(" "),s("td",[t._v("不变")]),t._v(" "),s("td",[t._v("升高")])]),t._v(" "),s("tr",[s("td",[t._v("分支3")]),t._v(" "),s("td",[t._v("不变")]),t._v(" "),s("td",[t._v("↓")]),t._v(" "),s("td",[t._v("升高")])])])]),t._v(" "),s("p",[t._v("x-y什么含义,就是数学上的求差,单独的X和单独的Y,变化是不是看不出来啊")]),t._v(" "),s("p",[t._v("结论 最大,2N,收敛于N")]),t._v(" "),s("h2",{attrs:{id:"next数组加载过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next数组加载过程"}},[t._v("#")]),t._v(" next数组加载过程")]),t._v(" "),s("p",[t._v("i-1位置的数,要对i位置有个提示作用.(前一个位置的数要对后一个数有提示作用)")]),t._v(" "),s("p",[s("strong",[t._v("规定")]),t._v(":0位置是-1,1位置是0,2位置看0==1位置,等就是1否则就是0.")]),t._v(" "),s("p",[t._v("再往上.")]),t._v(" "),s("p",[t._v("看i-1位置是否等于前缀下一个,如果相等,就是i-1位置+1")]),t._v(" "),s("p",[t._v("注意:i位置一定不可能比i-1位置大超过1.")]),t._v(" "),s("p",[t._v("验证.")]),t._v(" "),s("p",[t._v("如果19位置是7,代表"),s("code",[t._v("0-6位置==12-18位置")]),t._v(",最长前缀后缀都是7嘛.")]),t._v(" "),s("p",[t._v("如果20位置是9,代表"),s("code",[t._v("0-8==11-19")]),t._v(",最长前缀后缀都是9嘛.那么19位置往前看,就应该是"),s("code",[t._v("0-7==11-18")]),t._v(",应该是8而不应该是7.")]),t._v(" "),s("p",[s("img",{attrs:{src:a(534),alt:"image-20240619235354295"}})]),t._v(" "),s("p",[t._v("所以,next数组的值最大是i-1位置+1")]),t._v(" "),s("p",[t._v("如果i-1不等于前缀+1个字符,那么,找到前缀+1位置的next的值,看看这个值的下一个是否等于i-1位置的字符.如图所示")]),t._v(" "),s("p",[s("img",{attrs:{src:a(535),alt:"image-20240619235636268"}})]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNextArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 目前在哪个位置上求next数组的值")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前是哪个位置的值再和i-1位置的字符比较,较大的长度的匹配不上,咋弄呢,缩呗.看看他前面的最长到哪.")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配成功的时候 2.按上面图的例子扩到7,配上了,7位置是1.  3.下个位置又相等,8位置是2.下个位置又相等9位置是cn -> 3.")]),t._v("\n         next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4,按上图例子,扩到10位置,配不上了,跳到next数组cn的位置")]),t._v("\n         cn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1. 按上面图的例子扩到6都是0")]),t._v("\n         next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"练习题一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习题一"}},[t._v("#")]),t._v(" 练习题一")]),t._v(" "),s("blockquote",[s("p",[t._v("我们说有一个字符串,例如123456,234561,或者345612.......是旋转串.")]),t._v(" "),s("p",[t._v("问str1,str2是否互为旋转串.")])]),t._v(" "),s("p",[t._v("这个题很经典,也很骚.就是个kmp题,首先比较长度,不一样长,直接排,然后两个str1拼成一个大的串,然后我们就看,str2在这个结果上出现没有.")]),t._v(" "),s("h2",{attrs:{id:"练习题二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习题二"}},[t._v("#")]),t._v(" 练习题二")]),t._v(" "),s("blockquote",[s("p",[t._v("两棵树,A树比B树大,请问B树是不是A树的子树,")]),t._v(" "),s("p",[t._v("子树就是全都得要,不能抛下某个分支.")])]),t._v(" "),s("p",[t._v("这个题就是将2颗树都序列化,然后利用kmp,如果b树字符串出现在a树中了,那B就是A的子树.")])])}),[],!1,null,null,null);s.default=r.exports}}]);