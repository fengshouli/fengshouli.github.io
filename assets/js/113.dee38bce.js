(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{966:function(a,t,e){"use strict";e.r(t);var s=e(17),c=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_3、mq面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、mq面试题"}},[a._v("#")]),a._v(" 3、MQ面试题")]),a._v(" "),t("h2",{attrs:{id:"_1、什么是延时消息-各种mq的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是延时消息-各种mq的实现"}},[a._v("#")]),a._v(" 1、什么是延时消息，各种MQ的实现？")]),a._v(" "),t("p",[a._v("具体见PPT")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1726647128014/d93c1fe3880f44299025c6cce1f9273e.png",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"_2、如何确保消息的顺序性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何确保消息的顺序性"}},[a._v("#")]),a._v(" 2、如何确保消息的顺序性")]),a._v(" "),t("p",[a._v("基本上只要确保一个生产者、一个消费者。即可。")]),a._v(" "),t("p",[a._v("其他的可以见PPT和老师视频讲解。")]),a._v(" "),t("h2",{attrs:{id:"_3、讲一讲零拷贝原理以及mq的运用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、讲一讲零拷贝原理以及mq的运用"}},[a._v("#")]),a._v(" 3、讲一讲零拷贝原理以及MQ的运用")]),a._v(" "),t("h3",{attrs:{id:"什么是零拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是零拷贝"}},[a._v("#")]),a._v(" "),t("strong",[a._v("什么是零拷贝?")])]),a._v(" "),t("p",[a._v("零拷贝(英语: Zero-copy) 技术是指计算机执行操作时，CPU不需要先将数据从某处内存复制到另一个特定区域。这种技术通常用于通过网络传输文件时节省CPU周期和内存带宽。")]),a._v(" "),t("p",[a._v("➢零拷贝技术可以减少数据拷贝和共享总线操作的次数，消除传输数据在存储器之间不必要的中间拷贝次数，从而有效地提高数据传输效率")]),a._v(" "),t("p",[a._v("➢零拷贝技术减少了用户进程地址空间和内核地址空间之间因为上:下文切换而带来的开销")]),a._v(" "),t("p",[a._v("可以看出没有说不需要拷贝，只是说减少冗余[不必要]的拷贝。")]),a._v(" "),t("p",[a._v("下面这些组件、框架中均使用了零拷贝技术：Kafka、Netty、Rocketmq、Nginx、Apache。")]),a._v(" "),t("h3",{attrs:{id:"传统数据传送机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传统数据传送机制"}},[a._v("#")]),a._v(" "),t("strong",[a._v("传统数据传送机制")])]),a._v(" "),t("p",[a._v("比如：读取文件，再用socket发送出去，实际经过四次copy。")]),a._v(" "),t("p",[a._v("伪码实现如下：")]),a._v(" "),t("p",[a._v("buffer = File.read()")]),a._v(" "),t("p",[a._v("Socket.send(buffer)")]),a._v(" "),t("p",[a._v("1、第一次：将磁盘文件，读取到操作系统内核缓冲区；")]),a._v(" "),t("p",[a._v("2、第二次：将内核缓冲区的数据，copy到应用程序的buffer；")]),a._v(" "),t("p",[a._v("3、第三步：将application应用程序buffer中的数据，copy到socket网络发送缓冲区(属于操作系统内核的缓冲区)；")]),a._v(" "),t("p",[a._v("4、第四次：将socket buffer的数据，copy到网卡，由网卡进行网络传输。")]),a._v(" "),t("p",[a._v("![](file:///C:/Users/lijin/AppData/Local/Temp/ksohtml22056/wps1.jpg?lastModify=1726734914)"),t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1713263133047/3e80c5ce25ee4ac1afb7b70e35c6bee8.png",alt:""}})]),a._v(" "),t("h4",{attrs:{id:"mmap内存映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mmap内存映射"}},[a._v("#")]),a._v(" "),t("em",[t("strong",[a._v("mmap内存映射")])])]),a._v(" "),t("p",[a._v("硬盘上文件的位置和应用程序缓冲区(application buffers)进行映射（建立一种一一对应关系），由于mmap()将文件直接映射到用户空间，所以实际文件读取时根据这个映射关系，直接将文件从硬盘拷贝到用户空间，只进行了一次数据拷贝，不再有文件内容从硬盘拷贝到内核空间的一个缓冲区。")]),a._v(" "),t("p",[a._v("mmap内存映射将会经历：3次拷贝: 1次cpu copy，2次DMA copy；")]),a._v(" "),t("p",[a._v("![](file:///C:/Users/lijin/AppData/Local/Temp/ksohtml22056/wps2.jpg?lastModify=1726734914)"),t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1713263133047/5749d8bdf46d4a599e6daadc620029fb.png",alt:""}})]),a._v(" "),t("p",[a._v("![](file:///C:/Users/lijin/AppData/Local/Temp/ksohtml22056/wps3.jpg?lastModify=1726734914)")]),a._v(" "),t("h4",{attrs:{id:"sendfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sendfile"}},[a._v("#")]),a._v(" "),t("em",[t("strong",[a._v("sendfile")])])]),a._v(" "),t("p",[a._v("linux 2.1支持的sendfile")]),a._v(" "),t("p",[a._v("当调用sendfile()时，DMA将磁盘数据复制到kernel buffer，然后将内核中的kernel buffer直接拷贝到socket buffer。在硬件支持的情况下，甚至数据都并不需要被真正复制到socket关联的缓冲区内。取而代之的是，只有记录数据位置和长度的描述符被加入到socket缓冲区中，DMA模块将数据直接从内核缓冲区传递给协议引擎，从而消除了遗留的最后一次复制。")]),a._v(" "),t("p",[a._v("一旦数据全都拷贝到socket buffer，sendfile()系统调用将会return、代表数据转化的完成。socket buffer里的数据就能在网络传输了。")]),a._v(" "),t("p",[a._v("sendfile会经历：3次拷贝，1次CPU copy ，2次DMA copy；硬件支持的情况下，则是2次拷贝，0次CPU copy， 2次DMA copy。")]),a._v(" "),t("p",[a._v("![](file:///C:/Users/lijin/AppData/Local/Temp/ksohtml22056/wps4.jpg?lastModify=1726734914)"),t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1713263133047/c0634f7f6ec040a08c81338dd5743a8b.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"_4、分布式事物消息以及在rocketmq的运用及原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、分布式事物消息以及在rocketmq的运用及原理"}},[a._v("#")]),a._v(" 4、分布式事物消息以及在RocketMQ的运用及原理")]),a._v(" "),t("h2",{attrs:{id:"什么是分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是分布式事务"}},[a._v("#")]),a._v(" 什么是分布式事务？")]),a._v(" "),t("p",[a._v("业务场景：用户A转账100元给用户B，这个业务比较简单，具体的步骤：\n1、用户A的账户先扣除100元\n2、再把用户B的账户加100元")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/7a79c3d1742645a7952bb344bf695ff8.png",alt:"image.png"}})]),a._v(" "),t("p",[a._v("如果在同一个数据库中进行，事务可以保证这两步操作，要么同时成功，要么同时不成功。这样就保证了转账的数据一致性。\n但是在微服务架构中，因为各个服务都是独立的模块，都是远程调用，都没法在同一个事务中，都会遇到分布式事务问题。")]),a._v(" "),t("h2",{attrs:{id:"rocketmq的解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq的解决方案"}},[a._v("#")]),a._v(" RocketMQ的解决方案")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/64fe7d7a7f7340d0991ba9f0846710be.png",alt:"image.png"}})]),a._v(" "),t("p",[a._v("RocketMQ采用两阶段提交，把扣款业务和加钱业务异步化，在A系统扣款成功后，发送“扣款成功消息”到消息中间件；B系统中加钱业务订阅“扣款成功消息”，再对用户进行加钱。")]),a._v(" "),t("h4",{attrs:{id:"具体的处理方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#具体的处理方案"}},[a._v("#")]),a._v(" 具体的处理方案")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/c76bc1cd2fc7432fbeac2f240c90d588.png",alt:"image.png"}})]),a._v(" "),t("ol",[t("li",[t("p",[a._v("生产者发送半消息（half message）到RocketMQ服务器")])]),a._v(" "),t("li",[t("p",[a._v("RocketMQ服务器向生产者返回半消息的提交结果")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/92d3d9a0fcf744db8c3e45822f95d087.png",alt:"image.png"}})])]),a._v(" "),t("li",[t("p",[a._v("生产者执行本地的事务")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/14566cce97c8465fad1b50caec991911.png",alt:"image.png"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/a31824993e234f23a0ab77a63e4c93fe.png",alt:"image.png"}}),a._v("1）这里如果是标记为可提交状态（commit），消费者监听主题即可立马消费（TransactionTopic主题），消费者进行事务处理，提交。")]),a._v(" "),t("p",[a._v("2）如果这里标记为回滚，那么消费者就看不到这条消息，整个事务都是回滚的")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/8a43a2905f3049fba9066c30195f0f09.png",alt:"image.png"}})]),a._v(" "),t("p",[a._v("3）当然本地事务中还有一种情况，那就是没执行完，这个时候，可以提交UNKNOW,交给事务回查机制。 如果是事务回查中，生产者本地事务执行成功了，则提交commit，消费者监听主题即可立马消费，消费者进行事务处理，提交。                                                                                                                            如果这里标记为回滚，那么消费者就看不到这条消息，整个事务都是回滚的。                                             当然本地事务中还有一种情况，那就是还没执行完，这个时候还是可以继续提交UNKNOW,交给事务回查机制（过段时间继续进入事务回查）。")])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/5544838d4cb140de9a7c4e9bc90963e5.png",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"rocketmq分布式事务方案中的异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq分布式事务方案中的异常处理"}},[a._v("#")]),a._v(" RocketMQ分布式事务方案中的异常处理")]),a._v(" "),t("h3",{attrs:{id:"事务回查失败的处理机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务回查失败的处理机制"}},[a._v("#")]),a._v(" 事务回查失败的处理机制")]),a._v(" "),t("p",[a._v("在生产者有可能是要进行定时的事务回查的，所以在这个过程中有可能生产者宕机导致这条分布式事务消息不能正常进行。那么在RocketMQ中的生产者分组就会发挥作用")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/842ff8440dc64610a5b47d1ea1bbb0db.png",alt:"image.png"}})]),a._v(" "),t("p",[a._v("也就是如果在进行分布式事务回查中（RocketMQ去调用生产者客户端）某一台生产者宕机了，这个时候只要还有一台分组名相同的生产者在运行，那么就可以帮助之前宕机的生产者完成事务回查。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/df8b30b3dbc147f0932c63a7d71ff94d.png",alt:"image.png"}})]),a._v(" "),t("h3",{attrs:{id:"消费者失败补偿机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消费者失败补偿机制"}},[a._v("#")]),a._v(" 消费者失败补偿机制")]),a._v(" "),t("p",[a._v("虽然在消费者采用最大可能性的方案（重试的机制）确保这条消息能够执行成功，从而确保消费者事务的确保执行。但是还是有可能会发生消费者无法执行事务的情况，这个时候就必须要使用事务补偿方案。")]),a._v(" "),t("p",[a._v("业务场景：用户A转账100元给用户B，这个业务比较简单，具体的步骤：\n1、用户A的账户先扣除100元----生产者成功执行了\n2、再把用户B的账户加100元----消费者一直加100元失败。")]),a._v(" "),t("p",[a._v("那么就需要去通知生产者把之前扣除100元的操作进行补偿回滚操作。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/97e3371b42344321bff70feded453610.png",alt:"image.png"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/86f2b386aad449faa61beb69b84a34ef.png",alt:"image.png"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/dc929a82a0ef4feb974ea2fea7ae5e0c.png",alt:"image.png"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1684156852025/9c2f2045fff8485b86a04acc59e376ea.png",alt:"image.png"}})])])}),[],!1,null,null,null);t.default=c.exports}}]);