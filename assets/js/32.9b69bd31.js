(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{307:function(t,a,s){t.exports=s.p+"assets/img/bab2a078daa51826e4de80020120fcfd.d06670be.png"},308:function(t,a,s){t.exports=s.p+"assets/img/5a7c286de7d64c67fb4fcc2c43155538.89702e36.png"},309:function(t,a,s){t.exports=s.p+"assets/img/2eda641bbe54c060919337e53d91a1cd.05188329.png"},310:function(t,a,s){t.exports=s.p+"assets/img/f2977a4e5239da4733a70e36b447fd9f.cd7762d6.png"},311:function(t,a,s){t.exports=s.p+"assets/img/3db88964abdc23faf73102dc01757958.97458a6f.png"},312:function(t,a,s){t.exports=s.p+"assets/img/22a974d506af858ed9c55c799d9fa415.5c31b9b3.png"},313:function(t,a,s){t.exports=s.p+"assets/img/bd013aa0a6296fb0064db9170a17c141.7b0eb0ad.png"},768:function(t,a,s){t.exports=s.p+"assets/img/50e185047f79c167ef4f4d5aed6398d3.e019bc65.png"},981:function(t,a,s){"use strict";s.r(a);var e=s(17),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"spring-2024下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-2024下"}},[t._v("#")]),t._v(" Spring-2024下")]),t._v(" "),a("h2",{attrs:{id:"spring源码专题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring源码专题"}},[t._v("#")]),t._v(" Spring源码专题")]),t._v(" "),a("blockquote",[a("p",[t._v("lecture：波哥")])]),t._v(" "),a("p",[t._v("IoC、DI、AOP、事务")]),t._v(" "),a("h2",{attrs:{id:"一、spring的知识体系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、spring的知识体系"}},[t._v("#")]),t._v(" 一、Spring的知识体系")]),t._v(" "),a("p",[a("img",{attrs:{src:s(768),alt:"image.png"}})]),t._v(" "),a("p",[t._v("https://dpb-bobokaoya-sm.blog.csdn.net/article/details/119735616?spm=1001.2014.3001.5502")]),t._v(" "),a("h2",{attrs:{id:"二、谈谈你对ioc的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、谈谈你对ioc的理解"}},[t._v("#")]),t._v(" 二、谈谈你对IoC的理解")]),t._v(" "),a("p",[t._v("  Spring的IoC（Inversion of Control，控制反转）是一种设计模式，它的核心思想是将对象的创建、组装和管理过程交给框架来完成，而不是由应用程序直接控制。这种模式通过将应用程序的控制权交给框架来提高应用程序的可扩展性、灵活性和可维护性。")]),t._v(" "),a("h3",{attrs:{id:"_1-ioc的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-ioc的应用"}},[t._v("#")]),t._v(" 1. IoC的应用")]),t._v(" "),a("ol",[a("li",[t._v("Bean的定义：基于xml的方式，基于配置类的方式，@Component注解")]),t._v(" "),a("li",[t._v("Bean的发现：@Resources @Autowired 注解")])]),t._v(" "),a("h3",{attrs:{id:"_2-ioc的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ioc的原理"}},[t._v("#")]),t._v(" 2. IoC的原理")]),t._v(" "),a("p",[t._v("Bean 的管理： bean的定义  bean加载  bean 存储。bean的实例化")]),t._v(" "),a("p",[t._v("Bean的定义==》 BeanDefinition  ==》 BeanFactory【存储了所有的BeanDefinition】==》BeanDefinitionRegistry ==》 Bean实例有两种类型 单例，原型  单例==》容器初始化的时候==》完成对应的实例。单例Bean保存在一级缓存中。  原型Bean  在我们获取Bean的时候getBean()会完成对象的实例化。")]),t._v(" "),a("p",[t._v("对应的Bean的创建也是穿插在Spring容器的初始化过程中的")]),t._v(" "),a("p",[t._v("https://www.processon.com/view/link/6612404756d26b10e7b5fc84?cid=624802a95653bb072bd6da1e")]),t._v(" "),a("p",[a("img",{attrs:{src:s(307),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"三、谈谈你对bean的生命周期的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、谈谈你对bean的生命周期的理解"}},[t._v("#")]),t._v(" 三、谈谈你对Bean的生命周期的理解")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/qq_38526573/article/details/88143169")]),t._v(" "),a("p",[t._v("Servlet的生命周期")]),t._v(" "),a("p",[t._v("Fileter的生命周期")]),t._v(" "),a("p",[t._v("SpringBean对象：")]),t._v(" "),a("p",[t._v("对象的创建")]),t._v(" "),a("p",[t._v("对象的初始化")]),t._v(" "),a("p",[t._v("对象的使用")]),t._v(" "),a("p",[t._v("对象的销毁")]),t._v(" "),a("p",[a("img",{attrs:{src:s(308),alt:"image.png"}})]),t._v(" "),a("p",[t._v("具体流程的说明：")]),t._v(" "),a("ol",[a("li",[t._v("如果实现了BeanFactoryPostProcessor接口，那么在容器启动的时候，该接口中的postProcessBeanFactory方法可以修改Bean中元数据中的信息。该方法是在实例化对象之前执行")]),t._v(" "),a("li",[t._v("如果实现了InstantiationAwareBeanPostProcessor接口，那么在实例化Bean对象之前会调用"),a("strong",[t._v("postProcessBeforeInstantiation")]),t._v("方法，该方法如果返回的不为null则会直接调用postProcessAfterInitialization方法，而跳过了Bean实例化后及初始化前的相关方法，如果返回null则正常流程，"),a("strong",[t._v("postProcessAfterInstantiation")]),t._v("在实例化成功后执行，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是null。因为它的返回值是决定要不要调用postProcessPropertyValues方法的其中一个因素（因为还有一个因素是mbd.getDependencyCheck()）；如果该方法返回false,并且不需要check，那么postProcessPropertyValues就会被忽略不执行；如果返回true, postProcessPropertyValues就会被执行,"),a("strong",[t._v("postProcessPropertyValues")]),t._v("用来修改属性，在初始化方法之前执行。")]),t._v(" "),a("li",[t._v("如果实现了Aware相关的结果，那么相关的set方法会在初始化之前执行。")]),t._v(" "),a("li",[t._v("如果实现了BeanPostProcessor接口，那么该接口的方法会在实例化后的初始化方法前后执行。")]),t._v(" "),a("li",[t._v("如果实现了InitializingBean接口则在初始化的时候执行afterPropertiesSet")]),t._v(" "),a("li",[t._v("如果指定了init-method属性则在初始化的时候会执行指定的方法。")]),t._v(" "),a("li",[t._v("如果指定了@PostConstruct则在初始化的时候会执行标注的方法。")]),t._v(" "),a("li",[t._v("到此对象创建完成")]),t._v(" "),a("li",[t._v("当对象需要销毁的时候。")]),t._v(" "),a("li",[t._v("如果实现了DisposableBean接口会执行destroy方法")]),t._v(" "),a("li",[t._v("如果指定了destroy-method属性则会执行指定的方法")]),t._v(" "),a("li",[t._v("如果指定了@PreDestroy注解则会执行标注的方法")])]),t._v(" "),a("h2",{attrs:{id:"四、谈谈你对aop的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、谈谈你对aop的理解"}},[t._v("#")]),t._v(" 四、谈谈你对AOP的理解")]),t._v(" "),a("h3",{attrs:{id:"_1-aop的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-aop的概念"}},[t._v("#")]),t._v(" 1. AOP的概念")]),t._v(" "),a("p",[t._v("  AOP（Aspect Oriented Programming）,即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。面向切面是面向对象中的一种方式而已。在代码执行过程中，动态嵌入其他代码，叫做面向切面编程。")]),t._v(" "),a("h3",{attrs:{id:"_2-aop的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-aop的使用"}},[t._v("#")]),t._v(" 2. AOP的使用")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/qq_38526573/article/details/86441916")]),t._v(" "),a("h3",{attrs:{id:"_3-aop的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-aop的原理"}},[t._v("#")]),t._v(" 3. AOP的原理")]),t._v(" "),a("p",[t._v("https://cloud.fynote.com/share/d/NqIAAHPPN")]),t._v(" "),a("p",[a("img",{attrs:{src:s(309),alt:"image.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(310),alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"五、谈谈你对spring事务管理的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、谈谈你对spring事务管理的理解"}},[t._v("#")]),t._v(" 五、谈谈你对Spring事务管理的理解")]),t._v(" "),a("p",[t._v("单体的事务解决方案")]),t._v(" "),a("p",[t._v("分布式事务的解决方案")]),t._v(" "),a("p",[t._v("jdbc事务的概念")]),t._v(" "),a("h3",{attrs:{id:"_1-事务的传播属性和隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务的传播属性和隔离级别"}},[t._v("#")]),t._v(" 1. 事务的传播属性和隔离级别")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/qq_38526573/article/details/87898161")]),t._v(" "),a("p",[a("img",{attrs:{src:s(311),alt:"image.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(312),alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_2-事务原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事务原理分析"}},[t._v("#")]),t._v(" 2.事务原理分析")]),t._v(" "),a("p",[t._v("https://cloud.fynote.com/share/d/1qIUHPSAI")]),t._v(" "),a("h2",{attrs:{id:"六、谈谈你对spring循环依赖的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、谈谈你对spring循环依赖的理解"}},[t._v("#")]),t._v(" 六、谈谈你对Spring循环依赖的理解")]),t._v(" "),a("p",[t._v("https://cloud.fynote.com/share/d/GieUHTv6")]),t._v(" "),a("p",[a("img",{attrs:{src:s(313),alt:"image.png"}})]),t._v(" "),a("p",[t._v("1。非Spring的场景下的循环依赖问题：提前暴露 Map 一级缓存")]),t._v(" "),a("p",[t._v("2。Spring场景下的循环依赖问题：AOP代理对象。 提前暴露 三级缓存   一级【Bean定义后生成的单例对象 IOC 实例化生成的所有的单例对象】 二级【半成品对象】 三级【Lambda表达式】")]),t._v(" "),a("p",[t._v("3。各种Bean的情况对循环依赖的不同支持情况")])])}),[],!1,null,null,null);a.default=r.exports}}]);