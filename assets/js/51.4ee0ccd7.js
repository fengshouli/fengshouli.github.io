(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{542:function(t,s,a){t.exports=a.p+"assets/img/morris.ffe49772.gif"},543:function(t,s,a){t.exports=a.p+"assets/img/image-20240622124545072.4606ffb0.png"},717:function(t,s,a){"use strict";a.r(s);var n=a(17),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"morris遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#morris遍历"}},[t._v("#")]),t._v(" Morris遍历")]),t._v(" "),s("p",[t._v('Morris遍历其实就是二叉树的遍历,只不过,他省额外空间,正常我们做二叉树遍历的时候,需要压栈,然后弹出时候,我们申请了一个"树高H"的额外空间.Morris可以省去这个空间.做到额外O(1).')]),t._v(" "),s("p",[t._v("Morris核心思想,在于利用了大量的叶子节点的空闲指针.而不是用额外的堆栈.来达到省空间的目的.")]),t._v(" "),s("h3",{attrs:{id:"morris遍历细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#morris遍历细节"}},[t._v("#")]),t._v(" Morris遍历细节")]),t._v(" "),s("p",[t._v("假设来到当前节点cur，开始时cur来到头节点位置"),s("br"),t._v("\n1）如果cur没有左孩子，cur向右移动(cur = cur.right)"),s("br"),t._v("\n2）如果cur有左孩子，找到左子树上最右的节点mostRight："),s("br"),t._v("\na.如果mostRight的右指针指向空，让其指向cur，"),s("br"),t._v("\n然后cur向左移动(cur = cur.left)"),s("br"),t._v("\nb.如果mostRight的右指针指向cur，让其指向null，"),s("br"),t._v("\n然后cur向右移动(cur = cur.right)"),s("br"),t._v("\n3）cur为空时遍历停止")]),t._v(" "),s("p",[t._v("太绕了,我们画个图")]),t._v(" "),s("p",[s("img",{attrs:{src:a(542),alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"morris遍历实质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#morris遍历实质"}},[t._v("#")]),t._v(" Morris遍历实质")]),t._v(" "),s("p",[t._v("建立一种机制：\n对于没有左子树的节点只到达一次，\n对于有左子树的节点会到达两次\nmorris遍历时间复杂度依然是O(N)")]),t._v(" "),s("h3",{attrs:{id:"morris序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#morris序"}},[t._v("#")]),t._v(" Morris序")]),t._v(" "),s("p",[s("img",{attrs:{src:a(543),alt:"image-20240622124545072"}})]),t._v(" "),s("ol",[s("li",[t._v("cur来到a,==第一次来到a==")]),t._v(" "),s("li",[t._v("找到左树b最右e,")]),t._v(" "),s("li",[t._v("e右孩子指向null,让他指向cur")]),t._v(" "),s("li",[t._v("cur向左跳来到b,==第一次来到b==")]),t._v(" "),s("li",[t._v("b左孩子d最右就是d,右孩子指向null,让他指向自己,")]),t._v(" "),s("li",[t._v("cur向左跳来到d,==第一次来到d==")]),t._v(" "),s("li",[t._v("d无左孩子,向右跳,此时,右指针指向的是b,==第二次来到b==")]),t._v(" "),s("li",[t._v("b有左孩子,可是他右指针指向自己,让e指向null,cur右跳,来到e,==第一次来到e==")]),t._v(" "),s("li",[t._v("e没左孩子,右跳,来到a,==第二次来到a==")]),t._v(" "),s("li",[t._v("a左树最右孩子,指向的是自己,让他指向null,cur右跳.来到c,==第一次来到c==")]),t._v(" "),s("li",[t._v("重复上面的规律操作,")])]),t._v(" "),s("p",[t._v("以上图为例,Morris序,有左树的的到达两次,没有左树的到达一次,")]),t._v(" "),s("p",[t._v("Morris序:a,b,d,b,e,a,c,f,c,g")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Morris遍历\n * @param head\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("morris")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" mostRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//找到左孩子")]),t._v("\n      mostRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一路找到左树最右孩子")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mostRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最右不是空,或者最右不是自己,一直右跳")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mostRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" mostRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mostRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mostRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//右边空了,右孩子指向自己,cur继续左跳")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mostRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mostRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//cur左跳后,一切重新开始.看看有没有左孩子")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果走else,一定是因为指向了自己,让他重新回到null")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            mostRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为空说明没有左孩子,直接右跳")]),t._v("\n      cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);